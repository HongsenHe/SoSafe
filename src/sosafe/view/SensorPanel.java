/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sosafe.view;

import java.beans.Beans;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.persistence.RollbackException;
import javax.swing.JOptionPane;
import sosafe.control.ViewControlMessage;
import sosafe.control.ViewController;
import sosafe.network.SensorProtocol;

/**
 *
 * @author Z
 */
public class SensorPanel extends javax.swing.JPanel implements StateChangeChain {
    
    public SensorPanel() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        ViewController.getInstance().addObserver(new SensorPanel.RefreshObserver());
        masterTable.setAutoCreateRowSorter(true);
        detailTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SoSafePU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM SensorInfo s");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        detailScrollPane = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        deleteDetailButton = new javax.swing.JButton();
        upSaveButton = new javax.swing.JButton();
        downSaveButton = new javax.swing.JButton();
        sensorComboBox = new javax.swing.JComboBox();

        FormListener formListener = new FormListener();

        setPreferredSize(new java.awt.Dimension(1260, 411));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorId}"));
        columnBinding.setColumnName("Sensor Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${relatedCustomerId}"));
        columnBinding.setColumnName("Related Customer Id");
        columnBinding.setColumnClass(sosafe.model.CustomerInfo.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorType}"));
        columnBinding.setColumnName("Sensor Type");
        columnBinding.setColumnClass(Short.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorStatus}"));
        columnBinding.setColumnName("Sensor Status");
        columnBinding.setColumnClass(Short.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorLocation}"));
        columnBinding.setColumnName("Sensor Location");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorPrice}"));
        columnBinding.setColumnName("Sensor Price");
        columnBinding.setColumnClass(Double.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${screenPosition}"));
        columnBinding.setColumnName("Screen Position");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${ipAddress}"));
        columnBinding.setColumnName("Ip Address");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${portNumber}"));
        columnBinding.setColumnName("Port Number");
        columnBinding.setColumnClass(Integer.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        masterScrollPane.setViewportView(masterTable);

        deleteButton.setText("Delete");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${selectedElement.alarmInfoCollection}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, eLProperty, detailTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${serialNumber}"));
        columnBinding.setColumnName("Serial Number");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alarmStatus}"));
        columnBinding.setColumnName("Alarm Status");
        columnBinding.setColumnClass(Short.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alarmType}"));
        columnBinding.setColumnName("Alarm Type");
        columnBinding.setColumnClass(Short.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${occurrenceTime}"));
        columnBinding.setColumnName("Occurrence Time");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${responseTime}"));
        columnBinding.setColumnName("Response Time");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alarmMemo}"));
        columnBinding.setColumnName("Alarm Memo");
        columnBinding.setColumnClass(String.class);
        jTableBinding.setSourceUnreadableValue(java.util.Collections.emptyList());
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        detailScrollPane.setViewportView(detailTable);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);

        deleteDetailButton.setText("Delete");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, detailTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteDetailButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteDetailButton.addActionListener(formListener);

        upSaveButton.setText("Save");
        upSaveButton.addActionListener(formListener);

        downSaveButton.setText("Save");
        downSaveButton.addActionListener(formListener);

        sensorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New Fire Sensor", "New Security Sensor" }));
        sensorComboBox.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1240, Short.MAX_VALUE)
                    .addComponent(detailScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(deleteDetailButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(downSaveButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(sensorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteDetailButton, downSaveButton, refreshButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(upSaveButton)
                    .addComponent(sensorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downSaveButton)
                    .addComponent(refreshButton)
                    .addComponent(deleteDetailButton))
                .addContainerGap())
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == deleteButton) {
                SensorPanel.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                SensorPanel.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteDetailButton) {
                SensorPanel.this.deleteDetailButtonActionPerformed(evt);
            }
            else if (evt.getSource() == upSaveButton) {
                SensorPanel.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == downSaveButton) {
                SensorPanel.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == sensorComboBox) {
                SensorPanel.this.sensorComboBoxActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void goActiveState() {
        deleteButton.setEnabled(true);
        deleteDetailButton.setEnabled(true);
        downSaveButton.setEnabled(true);
        upSaveButton.setEnabled(true);
        sensorComboBox.setEnabled(true);
    }

    @Override
    public void goDeactiveState() {
        deleteButton.setEnabled(false);
        deleteDetailButton.setEnabled(false);
        downSaveButton.setEnabled(false);
        upSaveButton.setEnabled(false);
        sensorComboBox.setEnabled(false);
    }
    
    private class RefreshObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            if (arg instanceof ViewControlMessage) {
                ViewControlMessage msg = (ViewControlMessage) arg;
                if (msg.type.equals(ViewControlMessage.SENSOR_INFO_UPDATED)) {
                    refreshTableView();
                }
            }
        }
    }
    
    private void refreshTableView() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }
        
    private void deleteDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDetailButtonActionPerformed
        int index = masterTable.getSelectedRow();
        sosafe.model.SensorInfo s = list.get(masterTable.convertRowIndexToModel(index));
        Collection<sosafe.model.AlarmInfo> as = s.getAlarmInfoCollection();
        int[] selected = detailTable.getSelectedRows();
        List<sosafe.model.AlarmInfo> toRemove = new ArrayList<sosafe.model.AlarmInfo>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {

            selected[idx] = detailTable.convertRowIndexToModel(selected[idx]);

            int count = 0;
            Iterator<sosafe.model.AlarmInfo> iter = as.iterator();
            while (count++ < selected[idx]) {
                iter.next();
            }
            sosafe.model.AlarmInfo a = iter.next();
            toRemove.add(a);
            entityManager.remove(a);
        }
        as.removeAll(toRemove);
        masterTable.clearSelection();
        masterTable.setRowSelectionInterval(index, index);
    }//GEN-LAST:event_deleteDetailButtonActionPerformed
    

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshTableView();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] selected = masterTable.getSelectedRows();
        List<sosafe.model.SensorInfo> toRemove = new ArrayList<sosafe.model.SensorInfo>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            sosafe.model.SensorInfo s = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(s);
            entityManager.remove(s);
        }
        list.removeAll(toRemove);
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
            ViewController.getInstance().alarmUpdated();
            ViewController.getInstance().sensorUpdated();
            JOptionPane.showMessageDialog(null, "Successfully save your data.");
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<sosafe.model.SensorInfo> merged = new ArrayList<sosafe.model.SensorInfo>(list.size());
            for (sosafe.model.SensorInfo s : list) {
                merged.add(entityManager.merge(s));
            }
            list.clear();
            list.addAll(merged);
            JOptionPane.showMessageDialog(null, "Failed to save your data.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void sensorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorComboBoxActionPerformed
        // TODO add your handling code here:
        sosafe.model.SensorInfo s = new sosafe.model.SensorInfo();
        s.setSensorId(ViewController.getInstance().getNewMaxSensorId());
        s.setRelatedCustomerId(ViewController.getInstance().getCurrentUser());
        s.setSensorType((short) (((javax.swing.JComboBox) evt.getSource()).getSelectedIndex() + 1));
        s.setSensorStatus(SensorProtocol.SENSOR_STATUS_ON);
        s.setSensorLocation("Default Location");
        s.setSensorPrice(9.9);
        s.setScreenPosition("0,0");
        s.setIpAddress("127.0.0.1");
        s.setPortNumber(9505);
        entityManager.persist(s);
        list.add(s);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_sensorComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteDetailButton;
    private javax.swing.JScrollPane detailScrollPane;
    private javax.swing.JTable detailTable;
    private javax.swing.JButton downSaveButton;
    private javax.persistence.EntityManager entityManager;
    private java.util.List<sosafe.model.SensorInfo> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JComboBox sensorComboBox;
    private javax.swing.JButton upSaveButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
