/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sosafe.view;

import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import sosafe.control.ViewControlMessage;
import sosafe.control.ViewController;
import sosafe.model.AlarmInfo;
import sosafe.network.AlarmProtocol;
import sosafe.network.NetworkTrafficLogger;


/**
 *
 * @author Z
 */
public class MainView extends javax.swing.JFrame implements StateChangeChain {
    
    private List<StateChangeChain> subChainPanels;
    
    /**
     * Creates new form Panel
     */
    public MainView() {
        initComponents();
        initCardPanel();
        ViewController.getInstance().addObserver(new MainView.RefreshObserver());
        NetworkTrafficLogger.getInstance().initLogTextArea(logTextArea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scheduleMenuItem = new javax.swing.JMenuItem();
        mainLayeredPane = new javax.swing.JLayeredPane();
        switchButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        systemButton = new javax.swing.JButton();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        cardPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        systemMenu = new javax.swing.JMenu();
        profileMenuItem = new javax.swing.JMenuItem();
        billMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        monitorMenu = new javax.swing.JMenu();
        mapMenuItem = new javax.swing.JMenuItem();
        sensorMenuItem = new javax.swing.JMenuItem();
        alarmMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        scheduleMenuItem.setMnemonic('s');
        scheduleMenuItem.setText("Schedule");
        scheduleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SoSafe Panel");
        setName("mainFrame"); // NOI18N

        switchButton.setBackground(java.awt.Color.red);
        switchButton.setText("Deactivate");
        switchButton.setToolTipText("Deactivate the whole system.");
        switchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Title");
        titleLabel.setPreferredSize(new java.awt.Dimension(768, 22));

        systemButton.setBackground(java.awt.Color.green);
        systemButton.setText("Online");
        systemButton.setToolTipText("Everything goes well.");

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logScrollPane.setViewportView(logTextArea);

        cardPanel.setPreferredSize(new java.awt.Dimension(1260, 411));
        cardPanel.setLayout(new java.awt.CardLayout());

        jLabel1.setText("Network Traffic Log");

        javax.swing.GroupLayout mainLayeredPaneLayout = new javax.swing.GroupLayout(mainLayeredPane);
        mainLayeredPane.setLayout(mainLayeredPaneLayout);
        mainLayeredPaneLayout.setHorizontalGroup(
            mainLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainLayeredPaneLayout.createSequentialGroup()
                        .addComponent(systemButton)
                        .addGap(18, 18, 18)
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(switchButton))
                    .addComponent(logScrollPane)
                    .addGroup(mainLayeredPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainLayeredPaneLayout.setVerticalGroup(
            mainLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainLayeredPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(switchButton)
                        .addComponent(systemButton))
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        mainLayeredPane.setLayer(switchButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayeredPane.setLayer(titleLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayeredPane.setLayer(systemButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayeredPane.setLayer(logScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayeredPane.setLayer(cardPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        mainLayeredPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        systemMenu.setMnemonic('s');
        systemMenu.setText("System");

        profileMenuItem.setMnemonic('p');
        profileMenuItem.setText("Profile");
        profileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        systemMenu.add(profileMenuItem);

        billMenuItem.setMnemonic('b');
        billMenuItem.setText("Bill");
        billMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        systemMenu.add(billMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        systemMenu.add(exitMenuItem);

        menuBar.add(systemMenu);

        monitorMenu.setMnemonic('m');
        monitorMenu.setText("Monitor");

        mapMenuItem.setMnemonic('m');
        mapMenuItem.setText("Map");
        mapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        monitorMenu.add(mapMenuItem);

        sensorMenuItem.setMnemonic('s');
        sensorMenuItem.setText("Sensor");
        sensorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        monitorMenu.add(sensorMenuItem);

        alarmMenuItem.setMnemonic('a');
        alarmMenuItem.setText("Alarm");
        alarmMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        monitorMenu.add(alarmMenuItem);

        menuBar.add(monitorMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLayeredPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLayeredPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void initCardPanel() {
        subChainPanels = new ArrayList<>();
        
        titleLabel.setText(profileMenuItem.getActionCommand());
        ProfilePanel profilePanel = new ProfilePanel();
        cardPanel.add(profilePanel, profileMenuItem.getActionCommand());
        BillPanel billPanel = new BillPanel();
        cardPanel.add(billPanel, billMenuItem.getActionCommand());
        SchedulePanel schedulePanel = new SchedulePanel();
        cardPanel.add(schedulePanel, scheduleMenuItem.getActionCommand());
        
        MapPanel mapPanel = new MapPanel();
        cardPanel.add(mapPanel, mapMenuItem.getActionCommand());
        subChainPanels.add(mapPanel);
        SensorPanel sensorPanel = new SensorPanel();
        cardPanel.add(sensorPanel, sensorMenuItem.getActionCommand());
        subChainPanels.add(sensorPanel);
        AlarmPanel alarmPanel = new AlarmPanel();
        cardPanel.add(alarmPanel, alarmMenuItem.getActionCommand());
        subChainPanels.add(alarmPanel);
        
        ContentsPanel contentsPanel = new ContentsPanel();
        cardPanel.add(contentsPanel, contentsMenuItem.getActionCommand());
        AboutPanel aboutPanel = new AboutPanel();
        cardPanel.add(aboutPanel, aboutMenuItem.getActionCommand());
    }
    
    private class RefreshObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            if (arg instanceof ViewControlMessage) {
                ViewControlMessage msg = (ViewControlMessage) arg;
                if (msg.type.equals(ViewControlMessage.ALARM_INFO_UPDATED)) {
                    AlarmInfo alarm = (AlarmInfo) msg.data;
                    switch (alarm.getAlarmType()) {
                        case AlarmProtocol.ALARM_TYPE_FIRE:
                            fireAlert();
                            break;
                        case AlarmProtocol.ALARM_TYPE_SECURITY:
                            securityAlert();
                            break;
                        case AlarmProtocol.ALARM_TYPE_FAULT:
                            faultAlert();
                            break;
                        default:
                            break;
                    }
                }
            }
        }
    }
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void menuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemActionPerformed
        // TODO add your handling code here:
        CardLayout cl = (CardLayout)(cardPanel.getLayout());
        cl.show(cardPanel, evt.getActionCommand());
        titleLabel.setText(evt.getActionCommand());
    }//GEN-LAST:event_menuItemActionPerformed

    private void switchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchButtonActionPerformed
        // TODO add your handling code here:
        ViewController.getInstance().goNextState();
    }//GEN-LAST:event_switchButtonActionPerformed

    @Override
    public void goActiveState() {
        systemButton.setText("Online");
        systemButton.setToolTipText("Everything goes well");
        systemButton.setBackground(Color.GREEN);

        switchButton.setText("Deactivate");
        switchButton.setToolTipText("Deactivate the whole system");
        switchButton.setBackground(Color.RED);
        for(StateChangeChain sub : subChainPanels) {
            sub.goActiveState();
        }
    }
    
    @Override
    public void goDeactiveState() {
        systemButton.setText("Offline");
        systemButton.setToolTipText("The system is not running.");
        systemButton.setBackground(Color.GRAY);

        switchButton.setText("Activate");
        switchButton.setToolTipText("Activate the whole system");
        switchButton.setBackground(Color.GREEN);
        for(StateChangeChain sub : subChainPanels) {
            sub.goDeactiveState();
        }
    }
    
    public void fireAlert() {
        systemButton.setText("FIRE ALERT");
        systemButton.setToolTipText("Detected fire spot(s).");
        systemButton.setBackground(Color.RED);
    }
    
    public void securityAlert() {
        systemButton.setText("SECURITY ALERT");
        systemButton.setToolTipText("Detected break-in spot(s).");
        systemButton.setBackground(Color.ORANGE);
    }
    
    public void faultAlert() {
        systemButton.setText("FAULT ALERT");
        systemButton.setToolTipText("Detected fault spot(s).");
        systemButton.setBackground(Color.YELLOW);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem alarmMenuItem;
    private javax.swing.JMenuItem billMenuItem;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLayeredPane mainLayeredPane;
    private javax.swing.JMenuItem mapMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu monitorMenu;
    private javax.swing.JMenuItem profileMenuItem;
    private javax.swing.JMenuItem scheduleMenuItem;
    private javax.swing.JMenuItem sensorMenuItem;
    private javax.swing.JButton switchButton;
    private javax.swing.JButton systemButton;
    private javax.swing.JMenu systemMenu;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

}
