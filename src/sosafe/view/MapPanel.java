/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package sosafe.view;

import java.awt.Color;
import java.awt.Insets;
import java.beans.Beans;
import java.io.File;
import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sosafe.control.FlyweightSensorIconFactory;
import sosafe.control.ViewControlMessage;
import sosafe.control.ViewController;
import sosafe.model.AlarmInfo;
import sosafe.model.SensorInfo;
import sosafe.network.AlarmProtocol;

/**
 *
 * @author Z
 */
public class MapPanel extends JPanel implements StateChangeChain {
    
    private javax.swing.JLabel mapPicLabel;
    private Map<Long, SensorIcon> sensorIcons;
    private long lastSelectedSensorId;
    
    public MapPanel() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
        ViewController.getInstance().addObserver(new MapPanel.RefreshObserver());
        initSubMapPanel();
        initListListener();
        masterTable.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("SoSafePU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT s FROM SensorInfo s");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jFileChooser = new javax.swing.JFileChooser();
        subMapPanel = new javax.swing.JPanel();
        mapTitleLabel = new javax.swing.JLabel();
        mapLocationLabel = new javax.swing.JLabel();
        sensorListLabel = new javax.swing.JLabel();
        chooseMapButton = new javax.swing.JButton();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();

        FormListener formListener = new FormListener();

        jFileChooser.setCurrentDirectory(null);
        jFileChooser.setDialogTitle("Choose a Map");

        setPreferredSize(new java.awt.Dimension(1260, 411));

        javax.swing.GroupLayout subMapPanelLayout = new javax.swing.GroupLayout(subMapPanel);
        subMapPanel.setLayout(subMapPanelLayout);
        subMapPanelLayout.setHorizontalGroup(
            subMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1022, Short.MAX_VALUE)
        );
        subMapPanelLayout.setVerticalGroup(
            subMapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );

        mapTitleLabel.setText("Current Map: ");

        sensorListLabel.setText("Sensors");

        chooseMapButton.setText("Choose Map");
        chooseMapButton.addActionListener(formListener);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorId}"));
        columnBinding.setColumnName("Sensor Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${sensorLocation}"));
        columnBinding.setColumnName("Sensor Location");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        masterScrollPane.setViewportView(masterTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooseMapButton)
                            .addComponent(sensorListLabel)
                            .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(subMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapTitleLabel)
                    .addComponent(mapLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseMapButton)
                        .addGap(18, 18, 18)
                        .addComponent(sensorListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(masterScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(subMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == chooseMapButton) {
                MapPanel.this.chooseMapButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private class RefreshObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            if (arg instanceof ViewControlMessage) {
                ViewControlMessage msg = (ViewControlMessage) arg;
                if (msg.type.equals(ViewControlMessage.SENSOR_INFO_UPDATED)) {
                    refreshTableView();
                    refreshSensorIcons();
                } else if (msg.type.equals(ViewControlMessage.ALARM_INFO_UPDATED)) {
                    AlarmInfo alarm = (AlarmInfo) msg.data;
                    SensorInfo sensor = alarm.getRelatedSensorId();
                    SensorState newState;
                    switch (alarm.getAlarmType()) {
                        case AlarmProtocol.ALARM_TYPE_FIRE:
                        case AlarmProtocol.ALARM_TYPE_SECURITY:
                            newState = new SensorStateHot();
                            sensorIcons.get(sensor.getSensorId()).changeState(newState);
                            break;
                        case AlarmProtocol.ALARM_TYPE_FAULT:
                            newState = new SensorStateDown();
                            sensorIcons.get(sensor.getSensorId()).changeState(newState);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
    }
    
    private void initSubMapPanel() {
        subMapPanel.setLayout(null);
        
        URL url = getClass().getResource("/sosafe/res/BuildingA.jpg");
        ImageIcon imageIcon = new ImageIcon(url);
        mapLocationLabel.setText(url.getFile());
        mapPicLabel = new javax.swing.JLabel(imageIcon);
        subMapPanel.add(mapPicLabel);
        Insets insets = subMapPanel.getInsets();
        mapPicLabel.setBounds(insets.left, insets.top, mapPicLabel.getIcon().getIconWidth(), mapPicLabel.getIcon().getIconHeight());
        
        sensorIcons = new HashMap<>();
        refreshSensorIcons();
    }
    
    private void initListListener() {
        masterTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel rowSM = masterTable.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }
                
                if (sensorIcons.containsKey(lastSelectedSensorId)) {
                    sensorIcons.get(lastSelectedSensorId).setBorder(null);
                }
                
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    int selectedRow = lsm.getMinSelectionIndex();
                    Long sensorId = Long.valueOf(masterTable.getValueAt(selectedRow, 0).toString());
                    SensorIcon sensorIcon = sensorIcons.get(sensorId);
                    sensorIcon.setBorder(new LineBorder(Color.RED, 3));
                    lastSelectedSensorId = sensorId;
                } else {
                    lastSelectedSensorId = 0;
                }
            }
        });
    }
    
    private void refreshTableView() {
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }
    
    private void refreshSensorIcons() {
        
        Set<Long> exsitingSensorIds = new HashSet<>();
        
        for (sosafe.model.SensorInfo sensorInfo : list) {
            // Record all existing sensor ids for deleting missing sensors
            exsitingSensorIds.add(sensorInfo.getSensorId());
            // Donot add duplicated sensor icons
            if (sensorIcons.containsKey(sensorInfo.getSensorId())) {
                continue;
            }
            
            // Add new Sensor Icons
            SensorIcon newSensor = FlyweightSensorIconFactory.getSensorIcon(sensorInfo);
            subMapPanel.add(newSensor);
            sensorIcons.put(newSensor.getSensorId(), newSensor);
            Insets insets = subMapPanel.getInsets();
            int ScreenPosX = insets.left + newSensor.getIcon().getIconWidth();
            int ScreenPosY = insets.top;
            int width = newSensor.getIcon().getIconWidth();
            int height = newSensor.getIcon().getIconHeight();
            
            try {
                String[] coordinates = sensorInfo.getScreenPosition().split(",");
                if (coordinates.length > 0) ScreenPosX = Integer.parseInt(coordinates[0].trim());
                if (coordinates.length > 1) ScreenPosY = Integer.parseInt(coordinates[1].trim());
            } finally {
                newSensor.setBounds(ScreenPosX, ScreenPosY, width, height);
            }
        }
        
        Map<Long, SensorIcon> newSensorIcons = new HashMap<>();
        for (Long sensorId: sensorIcons.keySet()) {
            // Delete missing Sensor Icons
            if (!exsitingSensorIds.contains(sensorId)) {
                subMapPanel.remove(sensorIcons.get(sensorId));
            } else {
                newSensorIcons.put(sensorId, sensorIcons.get(sensorId));
            }
        }
        sensorIcons = newSensorIcons;
    }
    
    private void chooseMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMapButtonActionPerformed
        // TODO add your handling code here:
        int retVal = jFileChooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            ImageIcon icon = new ImageIcon(file.toString());
            mapLocationLabel.setText(file.toString());
            mapPicLabel.setIcon(icon);
            Insets insets = subMapPanel.getInsets();
            mapPicLabel.setBounds(insets.left, insets.top, mapPicLabel.getIcon().getIconWidth(), mapPicLabel.getIcon().getIconHeight());
        }
    }//GEN-LAST:event_chooseMapButtonActionPerformed
    
    @Override
    public void goActiveState() {
        SensorState newState = new SensorStateOn();
        for (Long sensorId: sensorIcons.keySet()) {
            sensorIcons.get(sensorId).changeState(newState);
        }
    }
    
    @Override
    public void goDeactiveState() {
        SensorState newState = new SensorStateOff();
        for (Long sensorId: sensorIcons.keySet()) {
            sensorIcons.get(sensorId).changeState(newState);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseMapButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JFileChooser jFileChooser;
    private java.util.List<sosafe.model.SensorInfo> list;
    private javax.swing.JLabel mapLocationLabel;
    private javax.swing.JLabel mapTitleLabel;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.persistence.Query query;
    private javax.swing.JLabel sensorListLabel;
    private javax.swing.JPanel subMapPanel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
